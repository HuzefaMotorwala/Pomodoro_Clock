[{"C:\\Users\\hp\\pomodoroclock\\src\\index.js":"1"},{"size":5500,"mtime":1611482554501,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"cvijra","C:\\Users\\hp\\pomodoroclock\\src\\index.js",["7"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\n\r\nconst audioSrc =\r\n\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\";\r\n\r\nfunction App(){\r\n\r\n    const[displayTime,setDisplayTime]=React.useState(25*60);\r\n    const[breakTime,setBreakTime]=React.useState(5*60);\r\n    const[sessionTime,setSessionTime]=React.useState(25*60)\r\n    const[timerOn,setTimerOn]=React.useState(false);\r\n    const[onBreak,setOnBreak]=React.useState(false);\r\n    const[audioBreak,setAudioBreak]=React.useState(new Audio(audioSrc));\r\n   \r\n    const playBreakSound=()=>{\r\n        audioBreak.currentTime=0;\r\n        audioBreak.play();\r\n    }\r\n    const formatTime=(time)=>{\r\n        let minutes=Math.floor(time/60);\r\n        let seconds=time%60;\r\n        return (\r\n            (minutes<10?\"0\"+minutes:minutes)+\":\"+(seconds<10?\"0\"+seconds:seconds)\r\n        )\r\n    }\r\n\r\n    const changeTime=(amount,type)=>{\r\n        if(type===\"break\"){\r\n            if(breakTime<=60&&amount<0){\r\n                return;\r\n            }\r\n            setBreakTime((prev)=>prev+amount);\r\n        }else{\r\n            if(sessionTime<=60&&amount<0){\r\n                return;\r\n            }\r\n            setSessionTime((prev)=>prev+amount);\r\n            if(!timerOn){\r\n                setDisplayTime(sessionTime+amount)\r\n            }\r\n        }\r\n    }\r\n    const resetTime=()=>{\r\n        if(timerOn){\r\n            clearInterval(localStorage.getItem(\"interval-id\"));\r\n        }\r\n        audioBreak.currentTime=0;\r\n        audioBreak.pause();\r\n        setTimerOn(false);\r\n        setOnBreak(false);\r\n        setDisplayTime(25*60);\r\n        setSessionTime(25*60);\r\n        setBreakTime(5*60);\r\n    }\r\n    const controlTime=()=>{\r\n        let second = 1000;\r\n        let date = new Date().getTime();\r\n        let nextDate = new Date().getTime() + second;\r\n        let onBreakVariable = onBreak;\r\n        if(!timerOn){\r\n            let interval=setInterval(()=>{\r\n                date=new Date().getTime();\r\n                if(date>nextDate){\r\n                    setDisplayTime((prev)=>{\r\n                        if(prev<=0 && !onBreakVariable){\r\n                            playBreakSound();\r\n                            onBreakVariable=true;\r\n                            setOnBreak(true)\r\n                            return breakTime;\r\n                        }\r\n                        if(prev<=0 && onBreakVariable){\r\n                            playBreakSound();\r\n                            onBreakVariable=false;\r\n                            setOnBreak(false)\r\n                            return sessionTime;\r\n                        }\r\n                        return prev - 1;\r\n                    })\r\n                    nextDate+=second;\r\n                }\r\n            },1000);\r\n            localStorage.clear();\r\n            localStorage.setItem(\"interval-id\",interval);\r\n        }\r\n        if(timerOn){\r\n            clearInterval(localStorage.getItem(\"interval-id\"));\r\n        }\r\n        setTimerOn(!timerOn);\r\n    }\r\n\r\n    return(\r\n        <div className=\"container-fluid\">\r\n            <div className=\"text-center\">\r\n                <div className=\"dual-container\">\r\n                    <Length\r\n                        title={\"Break Length\"}\r\n                        id=\"break-length\"\r\n                        changeTime={changeTime}\r\n                        type={\"break\"}\r\n                        time={breakTime}\r\n                        formatTime={formatTime}\r\n                    />\r\n                    <Length\r\n                        title={\"Session Length\"}\r\n                        id=\"session-length\"\r\n                        changeTime={changeTime}\r\n                        type={\"session\"}\r\n                        time={sessionTime}\r\n                        formatTime={formatTime}\r\n                    />\r\n                    \r\n                </div>\r\n                <div id=\"timer\">\r\n                    <h3 id=\"timer-label\">{onBreak?\"Break\":\"Session\"}</h3>\r\n                    <h1 id=\"time-left\" className=\"text-center\">{formatTime(displayTime)}</h1>\r\n                    <button id=\"start_stop\" className=\"btn btn-dark m-1\" onClick={controlTime}>\r\n                        {timerOn?(<i className=\"fas fa-pause-circle fa-2x\"></i>):(<i className=\"fas fa-play-circle fa-2x\"></i>)}\r\n                    </button>\r\n                    <button id=\"reset\" className=\"btn btn-dark m-1\" onClick={resetTime}>\r\n                        <i className=\"fas fa-sync-alt fa-2x\"></i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Length({title,changeTime,type,time,formatTime}){\r\n    return (\r\n        <div>\r\n            <h3 id={type===\"break\"?\"break-label\":\"session-label\"}>{title}</h3>\r\n            <div className=\"time-sets\">\r\n                <button id={type===\"break\"?\"break-decrement\":\"session-decrement\"} className=\"btn btn-dark\" onClick={()=>changeTime(-60,type)}>\r\n                    <i className=\"fas fa-arrow-circle-down fa-2x\"></i>\r\n                </button>\r\n                \r\n                <h3>{formatTime(time)}</h3>\r\n                <button id={type===\"break\"?\"break-increment\":\"session-increment\"} className=\"btn btn-dark\" onClick={()=>changeTime(60,type)}>\r\n                    <i className=\"fas fa-arrow-circle-up fa-2x\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App/>,document.getElementById(\"root\"));",{"ruleId":"8","severity":1,"message":"9","line":15,"column":22,"nodeType":"10","messageId":"11","endLine":15,"endColumn":35},"no-unused-vars","'setAudioBreak' is assigned a value but never used.","Identifier","unusedVar"]